{"ast":null,"code":"var _jsxFileName = \"/Users/dgsw36/Documents/GitHub/hg-uiseonggarlicham/src/pages/MainPage/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './style.css';\n\n// 여기에 자신의 유효한 API 키를 입력하세요.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = 'AIzaSyDikj4SRFKLKXIpuI6qMRFgyuslFg_yDA0';\n\n// YouTube 채널 ID를 사용하여 설정합니다.\nconst CHANNEL_ID = '@uiseongTV'; // 실제 유효한 채널 ID로 교체하세요.\n\nconst App = () => {\n  _s();\n  const [videos, setVideos] = useState([]);\n  useEffect(() => {\n    // 채널의 Shorts 영상을 가져오는 함수\n    const fetchShortsVideos = async () => {\n      try {\n        const response = await axios.get('https://www.googleapis.com/youtube/v3/search', {\n          params: {\n            key: API_KEY,\n            channelId: CHANNEL_ID,\n            part: 'snippet',\n            type: 'video',\n            maxResults: 10,\n            order: 'date',\n            videoDuration: 'any' // 이 부분을 'short'로 변경하여 오류를 방지\n          }\n        });\n        const shortsVideos = response.data.items.filter(video => video.snippet.title.toLowerCase().includes('shorts') || video.id.videoId);\n        setVideos(shortsVideos);\n      } catch (error) {\n        console.error('Error fetching YouTube shorts videos', error);\n      }\n    };\n    fetchShortsVideos();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"YouTube Shorts Videos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shorts-container\",\n      children: videos.map(video => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"shorts-video\",\n        children: [/*#__PURE__*/_jsxDEV(\"iframe\", {\n          width: \"320\",\n          height: \"180\",\n          src: `https://www.youtube.com/embed/${video.id.videoId}`,\n          frameBorder: \"0\",\n          allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n          allowFullScreen: true,\n          title: video.snippet.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: video.snippet.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)]\n      }, video.id.videoId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"39g9r2hk3cJXA16k+db4Z3Rqykw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","API_KEY","CHANNEL_ID","App","_s","videos","setVideos","fetchShortsVideos","response","get","params","key","channelId","part","type","maxResults","order","videoDuration","shortsVideos","data","items","filter","video","snippet","title","toLowerCase","includes","id","videoId","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","width","height","src","frameBorder","allow","allowFullScreen","_c","$RefreshReg$"],"sources":["/Users/dgsw36/Documents/GitHub/hg-uiseonggarlicham/src/pages/MainPage/index.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './style.css';\n\n// 여기에 자신의 유효한 API 키를 입력하세요.\nconst API_KEY = 'AIzaSyDikj4SRFKLKXIpuI6qMRFgyuslFg_yDA0';\n\n// YouTube 채널 ID를 사용하여 설정합니다.\nconst CHANNEL_ID = '@uiseongTV'; // 실제 유효한 채널 ID로 교체하세요.\n\nconst App = () => {\n  const [videos, setVideos] = useState([]);\n\n  useEffect(() => {\n    // 채널의 Shorts 영상을 가져오는 함수\n    const fetchShortsVideos = async () => {\n      try {\n        const response = await axios.get('https://www.googleapis.com/youtube/v3/search', {\n          params: {\n            key: API_KEY,\n            channelId: CHANNEL_ID,\n            part: 'snippet',\n            type: 'video',\n            maxResults: 10,\n            order: 'date',\n            videoDuration: 'any', // 이 부분을 'short'로 변경하여 오류를 방지\n          },\n        });\n\n        const shortsVideos = response.data.items.filter(\n          (video) => video.snippet.title.toLowerCase().includes('shorts') || video.id.videoId\n        );\n        \n        setVideos(shortsVideos);\n      } catch (error) {\n        console.error('Error fetching YouTube shorts videos', error);\n      }\n    };\n\n    fetchShortsVideos();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>YouTube Shorts Videos</h1>\n      <div className=\"shorts-container\">\n        {videos.map((video) => (\n          <div key={video.id.videoId} className=\"shorts-video\">\n            <iframe\n              width=\"320\"\n              height=\"180\"\n              src={`https://www.youtube.com/embed/${video.id.videoId}`}\n              frameBorder=\"0\"\n              allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n              allowFullScreen\n              title={video.snippet.title}\n            ></iframe>\n            <p>{video.snippet.title}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,aAAa;;AAEpB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,OAAO,GAAG,yCAAyC;;AAEzD;AACA,MAAMC,UAAU,GAAG,YAAY,CAAC,CAAC;;AAEjC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAExCD,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,8CAA8C,EAAE;UAC/EC,MAAM,EAAE;YACNC,GAAG,EAAEV,OAAO;YACZW,SAAS,EAAEV,UAAU;YACrBW,IAAI,EAAE,SAAS;YACfC,IAAI,EAAE,OAAO;YACbC,UAAU,EAAE,EAAE;YACdC,KAAK,EAAE,MAAM;YACbC,aAAa,EAAE,KAAK,CAAE;UACxB;QACF,CAAC,CAAC;QAEF,MAAMC,YAAY,GAAGV,QAAQ,CAACW,IAAI,CAACC,KAAK,CAACC,MAAM,CAC5CC,KAAK,IAAKA,KAAK,CAACC,OAAO,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC,IAAIJ,KAAK,CAACK,EAAE,CAACC,OAC9E,CAAC;QAEDtB,SAAS,CAACY,YAAY,CAAC;MACzB,CAAC,CAAC,OAAOW,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC9D;IACF,CAAC;IAEDtB,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEP,OAAA;IAAK+B,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBhC,OAAA;MAAAgC,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9BpC,OAAA;MAAK+B,SAAS,EAAC,kBAAkB;MAAAC,QAAA,EAC9B3B,MAAM,CAACgC,GAAG,CAAEf,KAAK,iBAChBtB,OAAA;QAA4B+B,SAAS,EAAC,cAAc;QAAAC,QAAA,gBAClDhC,OAAA;UACEsC,KAAK,EAAC,KAAK;UACXC,MAAM,EAAC,KAAK;UACZC,GAAG,EAAE,iCAAiClB,KAAK,CAACK,EAAE,CAACC,OAAO,EAAG;UACzDa,WAAW,EAAC,GAAG;UACfC,KAAK,EAAC,0FAA0F;UAChGC,eAAe;UACfnB,KAAK,EAAEF,KAAK,CAACC,OAAO,CAACC;QAAM;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpB,CAAC,eACVpC,OAAA;UAAAgC,QAAA,EAAIV,KAAK,CAACC,OAAO,CAACC;QAAK;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAVpBd,KAAK,CAACK,EAAE,CAACC,OAAO;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAWrB,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAChC,EAAA,CArDID,GAAG;AAAAyC,EAAA,GAAHzC,GAAG;AAuDT,eAAeA,GAAG;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}